// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpiutil.math.MathUtil;

import java.util.function.DoubleSupplier;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX frontLeft;
    private WPI_TalonFX backLeft;
    private WPI_TalonFX frontRight;
    private WPI_TalonFX backRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private boolean reversed = false;
    private double speedModifier = 1;

    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontLeft = new WPI_TalonFX(0);

        backLeft = new WPI_TalonFX(1);

        frontRight = new WPI_TalonFX(2);

        backRight = new WPI_TalonFX(3);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Add to subsystem view. Sometimes RobotBuilder will do this automatically, but sometimes it doesn't.
        addChild("Front Left", frontLeft);
        addChild("Front Right", frontRight);
        addChild("Back Left", backLeft);
        addChild("Back Right", backRight);

        initializeMotors();
        brake();
        setReversed(false);
        setSpeedModifier(1);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void coast() {
        backRight.setNeutralMode(NeutralMode.Coast);
        backLeft.setNeutralMode(NeutralMode.Coast);
        frontRight.setNeutralMode(NeutralMode.Coast);
        frontLeft.setNeutralMode(NeutralMode.Coast);
        SmartDashboard.putString("Drive Train/Brake Mode", "Coast");
    }

    public void brake() {
        backRight.setNeutralMode(NeutralMode.Brake);
        backLeft.setNeutralMode(NeutralMode.Brake);
        frontRight.setNeutralMode(NeutralMode.Brake);
        frontLeft.setNeutralMode(NeutralMode.Brake);
        SmartDashboard.putString("Drive Train/Brake Mode", "Brake");
    }

    public void initializeMotors() {
        frontRight.setInverted(true);
        backRight.setInverted(true);

        backLeft.follow(frontLeft);
        backRight.follow(frontRight);

        frontLeft.set(ControlMode.PercentOutput, 0);
        frontRight.set(ControlMode.PercentOutput, 0);
    }

    public void run(double l, double r) {
        if (reversed) {
            l *= -1;
            r *= -1;
        }
        frontLeft.set(MathUtil.clamp(l * speedModifier, -1, 1));
        frontRight.set(MathUtil.clamp(r * speedModifier, -1, 1));

        // I shouldn't need this
        backLeft.set(MathUtil.clamp(l * speedModifier, -1, 1));
        backRight.set(MathUtil.clamp(r * speedModifier, -1, 1));
    }

    public void setReversed(boolean set) {
        reversed = set;
        SmartDashboard.putBoolean("Drive Train/Reversed", reversed);
    }

    public boolean isReversed() {
        return reversed;
    }

    public void setSpeedModifier(double modifier) {
        speedModifier = modifier;
        SmartDashboard.putNumber("Drive Train/Speed Modifier", speedModifier);
    }
}
