// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.FunctionalCommand;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;

import java.util.function.BooleanSupplier;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.XboxController.Button;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a "declarative" paradigm, very little robot logic should
 * actually be handled in the {@link Robot} periodic methods (other than the
 * scheduler calls). Instead, the structure of the robot (including subsystems,
 * commands, and button mappings) should be declared here.
 */
public class RobotContainer {

    private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // The robot's subsystems
    private final Grabber m_grabber = new Grabber();
    private final DriveTrain m_driveTrain = new DriveTrain();

    // Joysticks
    private final XboxController xbox = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final JoystickButton xButton = new JoystickButton(xbox, XboxController.Button.kX.value);
    private final JoystickButton yButton = new JoystickButton(xbox, XboxController.Button.kY.value);
    private final JoystickButton aButton = new JoystickButton(xbox, XboxController.Button.kA.value);
    private final JoystickButton bButton = new JoystickButton(xbox, XboxController.Button.kB.value);
    private final JoystickButton leftBumper = new JoystickButton(xbox, XboxController.Button.kBumperLeft.value);
    private final JoystickButton rightBumper = new JoystickButton(xbox, XboxController.Button.kBumperRight.value);
    private final JoystickButton startButton = new JoystickButton(xbox, XboxController.Button.kStart.value);
    private final JoystickButton backButton = new JoystickButton(xbox, XboxController.Button.kBack.value);

    // Convert left trigger to a buttom active when it's held down more than 50%
    private final Trigger leftTrigger = new Trigger(() -> xbox.getRawAxis(XboxController.Axis.kLeftTrigger.value) > 0.4);

    // A chooser for autonomous commands
    SendableChooser<Command> m_chooser = new SendableChooser<>();

    /**
     * The container for the robot. Contains subsystems, OI devices, and commands.
     */
    private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
        // Smartdashboard Subsystems
        SmartDashboard.putData(m_grabber);
        SmartDashboard.putData(m_driveTrain);

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
        // Configure the button bindings
        configureButtonBindings();

        // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
        m_driveTrain.setDefaultCommand(new RunCommand(
            () -> m_driveTrain.run(
                MathUtil.adjustJoystick(-xbox.getRawAxis(XboxController.Axis.kLeftY.value)),
                MathUtil.adjustJoystick(-xbox.getRawAxis(XboxController.Axis.kRightY.value))
            ), m_driveTrain
        ));

        // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        SmartDashboard.putData("Auto Mode", m_chooser);
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }

    /**
     * Use this method to define your button->command mappings. Buttons can be
     * created by instantiating a {@link GenericHID} or one of its subclasses
     * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then
     * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
     */
    private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        // Create some buttons

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        xButton.whenPressed(new InstantCommand(m_grabber::extend, m_grabber));
        xButton.whenReleased(new InstantCommand(m_grabber::retract, m_grabber));

        leftBumper.whileHeld(new FunctionalCommand(
            () -> SmartDashboard.putBoolean("Drive Train/Toggle Lock Straight", true),
            () -> {
                double l = MathUtil.adjustJoystick(-xbox.getRawAxis(XboxController.Axis.kLeftY.value));
                double r = MathUtil.adjustJoystick(-xbox.getRawAxis(XboxController.Axis.kRightY.value));
                double s = (l + r) / 2;
                m_driveTrain.run(s, s);
            },
            interrupted -> SmartDashboard.putBoolean("Drive Train/Toggle Lock Straight", false),
            () -> false,
            m_driveTrain)
        );

        rightBumper.whenPressed(new InstantCommand(() -> m_driveTrain.setReversed(true), m_driveTrain));
        rightBumper.whenReleased(new InstantCommand(() -> m_driveTrain.setReversed(false), m_driveTrain));

        leftTrigger.whenActive(new InstantCommand(() -> m_driveTrain.setSpeedModifier(0.5), m_driveTrain));
        leftTrigger.whenInactive(new InstantCommand(() -> m_driveTrain.setSpeedModifier(1), m_driveTrain));

        startButton.whenPressed(new InstantCommand(m_driveTrain::brake, m_driveTrain));

        backButton.whenPressed(new InstantCommand(m_driveTrain::coast, m_driveTrain));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getXbox() {
        return xbox;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    /**
     * Use this to pass the autonomous command to the main {@link Robot} class.
     *
     * @return the command to run in autonomous
     */
    public Command getAutonomousCommand() {
        // The selected command will be run in autonomous
        return m_chooser.getSelected();
    }

}
